<VirtualHost *:80>
   RewriteEngine On
   RewriteCond %{HTTPS}  !=on
   RewriteCond %{HTTP_HOST} !=localhost
   RewriteCond %{HTTP_HOST} !=127.0.0.1
   RewriteCond %{REMOTE_ADDR} !=127.0.0.1
   RewriteCond %{REMOTE_ADDR} !=::1
   RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]

   SetEnvIf Request_URI "^/server-status$" dontlog

   ErrorLog /var/log/apache2/error.log
   CustomLog /var/log/apache2/access.log combined env=!dontlog
</VirtualHost>

<VirtualHost *:443>
   ServerName {{ nics_web_fqdn }}
   Protocols h2 http/1.1
   RewriteEngine On

   ## OpenID Connect
   OIDCProviderMetadataURL https://{{ nics_keycloak_fqdn }}/auth/realms/{{ nics_keycloak_realm }}/.well-known/openid-configuration
   OIDCRedirectURI https://{{ nics_web_fqdn }}/sso/redirect_uri
   OIDCProviderEndSessionEndpoint https://{{ nics_keycloak_fqdn }}/auth/realms/{{ nics_keycloak_realm }}/protocol/openid-connect/logout
   OIDCCryptoPassphrase B8dWDdIKchpZXrwHWONZ
   OIDCClientID {{ nics_keycloak_clientid }}
   OIDCClientSecret {{ nics_keycloak_clientsecret }}
   OIDCRemoteUserClaim email
   OIDCScope "openid email"
   OIDCCookie {{ nics_keycloak_clientid }}_mod_auth_openidc_session
   OIDCSessionInactivityTimeout 1800
   OIDCSessionMaxDuration 36000
   OIDCCookiePath /
   OIDCCookieDomain {{ nics_cookie_domain }}  
   OIDCStateMaxNumberOfCookies 1 true
   OIDCCacheType redis
   OIDCRedisCacheServer localhost:6379
   OIDCHTMLErrorTemplate /var/www/html/OIDCHTMLErrorTemplate.html
   OIDCDefaultURL https://{{ nics_alias_fqdn }}
   OIDCProviderEndSessionEndpoint https://{{ nics_keycloak_fqdn }}/auth/realms/{{ nics_keycloak_realm }}/protocol/openid-connect/logout
   {% if nics_use_self_signed_certs == true %}
   OIDCSSLValidateServer Off
   OIDCOAuthSSLValidateServer Off
   {% endif %}
   ## OAuth 2.0 Resource Server
   OIDCOAuthIntrospectionEndpointParams token_type_hint=access_token
   OIDCOAuthVerifyJwksUri https://{{ nics_keycloak_fqdn }}/auth/realms/{{ nics_keycloak_realm }}/protocol/openid-connect/certs

   OIDCOAuthRemoteUserClaim email

   <Location "\.(js|json|gif|png|ico|jpeg|jpg)$">
      AuthType auth-openidc
      Require valid-user
      #LogLevel debug
      OIDCUnAuthAction 401
   </Location>

   <Location />
      <If "-R '{{ ansible_default_ipv4.address }}'">
         Require all granted
      </If>
      <ElseIf> "%{REQUEST_URI} =~ m#^/\.well-known/host-meta\.json$# ">
         Require all granted
      </ElseIf>
      <ElseIf> "%{REQUEST_URI} =~ m#^/auth/#">
         Require all granted
      </ElseIf>
      <Else>
         AuthType auth-openidc
         Require valid-user
         #LogLevel debug
      </Else>
   </Location>

   <Directory /var/www/html/nics-ui>
      Options -MultiViews
      RewriteEngine On
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteRule ^ index.html [QSA,L]
   </Directory>

   <Directory /var/www/html/help>
      Options -MultiViews
      RewriteEngine On
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteRule ^ index.html [QSA,L]
   </Directory>

   ProxyPreserveHost On
   ProxyPass /nics/ui !
   Alias /nics/ui /var/www/html/nics-ui
   
	Alias /static {{ nics_home_directory }}/static
	Alias /upload {{ nics_home_directory }}/upload

   ProxyPass /nics/help !
   Alias /nics/ui /var/www/html/help

   ProxyPass /nics http://localhost:8080/nics
   ProxyPassReverse /nics http://localhost:8080/nics

   ProxyPass /api http://localhost:8080/em-api
   ProxyPassReverse /api http://localhost:8080/em-api

   ProxyPass /geoserver http://localhost:8080/geoserver
   ProxyPassReverse /geoserver http://localhost:8080/geoserver

   ProxyPass /auth http://localhost:8081/auth
   ProxyPassReverse /auth http://localhost:8081/auth

   RewriteCond %{REQUEST_URI}  ^/nics/mediator        [NC]
   RewriteCond %{QUERY_STRING} X-Atmosphere-Transport=websocket    [NC]
   RewriteRule /(.*)           ws://localhost:8080/$1 [P,L]
   ProxyPass /nics/mediator http://localhost:8080/nics/mediator

   RewriteCond %{REQUEST_URI} ^/nics/login*
   RewriteRule "^/nics/login(.*)" "/nics/home.html" [R]

   RewriteCond %{REQUEST_URI} ^/nics$
   RewriteRule "^/nics$" "/nics/home.html" [R]

   RewriteCond %{REQUEST_URI} ^/$
   RewriteRule "^/$" "/nics/home.html" [R]

   RequestHeader set X-Remote-User %{REMOTE_USER}s
   RequestHeader set X-Session-Id %{oidc_claim_session_state}e
   RequestHeader set X-Forwarded-Proto "https"
   RequestHeader set X-Forwarded-Port "443"
   
   Header set Access-Control-Allow-Origin "*"
   Header set Access-Control-Allow-Headers "Authorization,Content-Type,X-Requested-With,X-Remote-User,Access-Control-Allow-Origin"
   Header set Access-Control-Allow-Methods "POST, GET, OPTIONS, DELETE, PUT"
    
   SSLEngine on
   SSLProxyEngine on
   SSLCertificateFile "{{ nics_sslcertificates_path }}/{{ nics_web_sslcertificatefile }}"
   SSLCertificateKeyFile "{{ nics_sslcertificates_path }}/{{ nics_web_sslcertificatekeyfile }}"
   SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
   SSLCipherSuite          ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
   SSLHonorCipherOrder     on
	 
   CustomLog /var/log/apache2/access.log combined 
   ErrorLog /var/log/apache2/error.log
</VirtualHost>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
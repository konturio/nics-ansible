#
# Copyright (c) 2008-2021, Massachusetts Institute of Technology (MIT)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

---

- name: deploy and configure services
  vars:
    nics_ansible_path: "~/nics/nics-core-processor"
    nics_deploy_path: "/opt/nics/deploy"
    version: "7.0.9-SNAPSHOT"
    apps:
      - collab-feed-manager
      - email-consumer
      - geodatafeed-consumer
      - gst2gml
      - incorg-room-creator
      - json-pli-consumer

- name: create deploy and application directories
  file:
    path: "{{ nics_home_directory }}/deploy/{{ item }}"
    state: directory
    owner: tomcat8
    group: tomcat8
    mode: 0750
  loop: "{{ apps }}"

- name: Unarchive component manager archive
  unarchive:
    src: "{{ nics_ansible_path }}/component-manager-archive-builder/target/nics-component-manager-archive.zip"
    dest: "{{ nics_ansible_path }}/component-manager-archive-builder/target/unarchived"
    remote_src: yes

- name: Clear service deploy path
  file:
    path: "{{ nics_deploy_path }}/{{ item }}"
    state: absent
  loop: "{{ apps }}"

- name: Create service deploy directory
  file:
    path: "{{ nics_deploy_path }}/{{ item }}"
    state: directory
    mode: '0755'

- name: Unpack service tar.gz
  unarchive:
    src: "{{ nics_ansible_path }}/component-manager-archive-builder/target/unarchived/{{ item }}-{{ version }}-deployable.tar.gz"
    dest: "{{ nics_deploy_path }}/{{ item }}"
    remote_src: yes
  loop: "{{ apps }}"

- name: Move files from versioned directory to root of service directory
  command:
    cmd: mv "{{ nics_deploy_path }}/{{ item }}/{{ item }}-{{ version }}/*" "{{ nics_deploy_path }}/{{ item }}/"
    warn: false
  loop: "{{ apps }}"

- name: configure application properties
  template:
    src: "{{ item }}.properties"
    dest: "{{ nics_home_directory }}/deploy/{{ item }}/config"
    owner: tomcat8
    group: tomcat8
    mode: u=rw,g=r,o=
  loop: "{{ apps }}"
  notify: restart {{ item }}

- name: update ownership on deploy directory
  file:
    path: "{{ nics_home_directory }}/deploy/{{ item }}"
    state: directory
    owner: tomcat8
    group: tomcat8
    mode: u=rwX,g=rX,o=
    recurse: true
  loop: "{{ apps }}"

- name: copy application systemd unit file
  template:
    src: "{{ item }}.service"
    dest: /lib/systemd/system/{{ item }}.service
    owner: root
    group: root
  loop: "{{ apps }}"
  notify: restart {{ item }}

- name: link application systemd unit file
  file:
    src: /lib/systemd/system/{{ item }}.service
    dest: /etc/systemd/system/{{ item }}.service
    state: link
  loop: "{{ apps }}"

- name: enable application systemd daemon
  systemd:
    name: "{{ item }}"
    enabled: true
    daemon_reload: true
  loop: "{{ apps }}"`


